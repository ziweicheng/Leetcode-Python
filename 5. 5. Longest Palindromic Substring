# Brute Force

class Solution(object):
    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: str
        """
        if len(s) == 1 or s[::-1] == s:
            return s
        max_sub_string = 0
        longest_substring = ""
        for i in range(len(s)):
            for j in range(i,len(s)):
                if s[i:j+1] == s[i:j+1][::-1] and (j-i+1) > max_sub_string:
                    max_sub_string = j-i+1
                    longest_substring = s[i:j+1]
        return longest_substring
        
        ## String slice [i:j] ==> From i to j - 1 not to j.
        
        
        
        ## expand around center
        class Solution(object):
    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: str
        """
        if not s:
            return ""   
        longest = ""
        for m in range(len(s)):
			# palindrome expands at the center m
            sub = self.palindrome(s, m, m)
            if len(sub) > len(longest):
                longest = sub
			# palindrome expands at the center between m and m + 1
            sub = self.palindrome(s, m, m + 1)
            if len(sub) > len(longest):
                longest = sub
        return longest  
	# palindrome function finds the longest palindrome in string s from center m or center m and m+1.
    def palindrome(self, s, l, r):
        while l >= 0 and r < len(s) and s[l] == s[r]:
            l -= 1
            r += 1 
        return s[l + 1:r]
        
        
        
        ## concern two diffenent cases. center located at m and between m and m+1.
